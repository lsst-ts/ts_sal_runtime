/// \file Wcs.h
/// \brief Definition of the world coordinate system class.

// D L Terrett
// Copyright CLRC. All rights reserved.

#ifndef tpkWCS_H
#define tpkWCS_H

#include <stdexcept>
#include <string>
#include <vector>

#include "RefSys.h"

namespace tpk {

/// WCS transformation structure
    struct WCS {
        double ab0[2];       ///< Celestial coordinates at x=y=0
        double coeffs[6];    ///< Affine transformation coefficients
    };

/// World Coordinate System
/**
    A Wcs object encapsulates the transformation between instrument
    coordinates and some celestial coordinate system at some obeserved
    wavelength. It is created from a WCS transformation which is an structure
    containing numbers generated by the pointing kernel.
*/
    class Wcs {
        public:
            Wcs(
                const RefSys& refsys,
                const double wcsContext[8]
            );
            virtual ~Wcs() {
                delete mRefSys;
            }
            void inst2sph(
                const double& x,
                const double& y,
                double& a,
                double& b
            ) const;
            void sph2inst(
                const double& a,
                const double& b,
                double& x,
                double& y
            ) const;
            void getContext(
                double wcsContext[8]
            ) const;
            double orientation(void) const;
            std::vector<std::string> getFITSheaders (
                    double djm
            ) const throw (std::runtime_error);
            void getFITSvalues (
                    double djm,
                    std::string ctype1,
                    double& crpix1,
                    double& crval1,
                    std::string ctype2,
                    double& crpix2,
                    double& crval2,
                    double& cd1_1,
                    double& cd1_2,
                    double& cd2_1,
                    double& cd2_2,
                    std::string radecsys,
                    double& equinox,
                    double& mjdobs
            ) const throw (std::runtime_error);
        protected:
            void invtr();
            Wcs() {};
            const RefSys* mRefSys;      ///< coordinate reference system
            struct WCS mWcsTrans;       ///< world coordinate transformation
            struct WCS mWcsTrans_i;     ///< inverse world coordinate 
                                        ///  transformation
    };
}
#endif

