/// \file BaseVt.h
/// \brief Definition of the BaseVt class.

// D L Terrett
// Copyright CCLRC. All rights reserved.

#ifndef tpkBASEVT_H
#define tpkBASEVT_H

#include <memory>
#include <stdexcept>

#include "Coordinates.h"
#include "KernelRefSys.h"
#include "PointingOrigin.h"
#include "Target.h"
#include "TcsMutex.h"

namespace tpk {
    class MountVt;
    class Site;
    class TimeKeeper;
    class TrackRefSys;

/// Virtual base class for virtual telescope classes.
/**
    The BaseVt class is a virtual base class for virtual telescope like
    classes such as MountVt, AutoGuider etc. It provides some common
    methods and associated data members for setting a new target or
    pointing origin.

    It also defines the interface to the update method so that the medium
    processing loop does not need to know the types of the virtual telescopes.

    All the methods of this class are thread safe.
*/
    class BaseVt {
        friend class KernelWcs;
        public:
            virtual ~BaseVt() {};
            virtual void newPointingOrigin(
                const PointingOrigin& po
            ) throw();
            virtual void newTarget(
                const Target& target
            ) throw(std::runtime_error);

        /// Get copy of current target
        /**
            The position of target does not include any offset that may have
            been set.

            \returns Copy of current target
        */
            Target* getTarget() throw() {
                return mTarget->clone();
            }
            virtual void setWavelength(
                const double& wavelength
            ) throw ();
            virtual void setOffset(
                const double& xi,
                const double& eta,
                const RefSys& refsys
            ) throw ();
            virtual void setOffset(
                const double& xi,
                const double& eta
            ) throw ();
            virtual void incrOffset(
                const double& xi,
                const double& eta
            ) throw ();

        /// Update virtual telescope context
            virtual void update() throw(std::runtime_error) = 0;
        protected:

/// Maximum number of samples
/**
    This is the maximum number of samples that can be generated by the
    virtual telescope track methods. It should not be larger than the
    number of samples that can be handled by the Trajectory class.
*/
            static const unsigned int maxsamp = 3;

            BaseVt(
                const TimeKeeper& ticker,
                const Site& site,
                const RefSys& tracksys
            );
            BaseVt(
                const TimeKeeper& ticker,
                const Site& site,
                const BaseVt& scr
            );
            virtual void update(
                const MountVt& mount
            ) throw(std::runtime_error);
            virtual vector targetpos (
                double t,
                double sst,
                double cst
            ) const throw();
            const TimeKeeper& mTimeKeeper;          ///< time keeper
            const Site& mSite;                      ///< telescope site
            KernelRefSys::Ptr mKernelTF;            ///< kernel tracking frame
            RefSys::ConstPtr mTrackFrame;           ///< tracking frame
            mutable TcsMutex mMutex;                ///< mutex
            Target::Ptr mTarget;                    ///< current target

        /**
            This flag that signals to the SPM maintenance thread that a new
            target was set while it was executing and that therefore the SPMs
            it has generated should not be copied into the member variables.
        */
            bool mNewTarget;                        ///< new target flag
            PointingOrigin::ConstPtr mPO;           ///< pointing origin
            double mWavel;                          ///< effective wavelength 
                                                    ///  (microns)
            xycoord mOffset;                        ///< target offset
            KernelRefSys::Ptr mKernelOF;            ///< kernel offset reference frame
            RefSys::Ptr mOffsetFrame;               ///< offset reference frame
            vector mPosition;                       ///< target position
            focalplane mImxy;                       ///< focal plane position
            double mTemp;                           ///< temperature (deg K)
            double mPress;                          ///< pressure (mbar)
            double mHumid;                          ///< relative humidity
            double mTLR;                            ///< tropospheric lapse rate
            double mTai;                            ///< TAI of last pointing 
                                                    ///  calculation (MJD)
            double mSst;                            ///< sine of sidereal time
            double mCst;                            ///< cosine of sidereal 
                                                    ///  time
        private:
        // No default constructor, copy constructor or assignment operator
            BaseVt();
            BaseVt(const BaseVt&);
            BaseVt& operator=(const BaseVt&);
    };
}
#endif

