DROP TABLE IF EXISTS catchuparchiver_command_enterControl;
CREATE TABLE catchuparchiver_command_enterControl (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  state tinyint,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_SequencerHeartbeat;
CREATE TABLE catchuparchiver_SequencerHeartbeat (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  Name varchar(32),
  Identifier float,
  Timestamp varchar(32),
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_command_standby;
CREATE TABLE catchuparchiver_command_standby (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  state tinyint,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_commandLog;
CREATE TABLE catchuparchiver_commandLog (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_seqNum int,
  name varchar(128),
  ack int,
  error int,
  PRIMARY KEY (date_time)
);

DROP TABLE IF EXISTS catchuparchiver_logevent_ErrorCode;
CREATE TABLE catchuparchiver_logevent_ErrorCode (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  errorCode int,
  priority int,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_command_disable;
CREATE TABLE catchuparchiver_command_disable (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  state tinyint,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_command_abort;
CREATE TABLE catchuparchiver_command_abort (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  state tinyint,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_command_stop;
CREATE TABLE catchuparchiver_command_stop (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  state tinyint,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_logevent_SummaryState;
CREATE TABLE catchuparchiver_logevent_SummaryState (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  SummaryStateValue int,
  priority int,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_logevent_AppliedSettingsMatchStart;
CREATE TABLE catchuparchiver_logevent_AppliedSettingsMatchStart (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  appliedSettingsMatchStartIsTrue tinyint,
  priority int,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_command_start;
CREATE TABLE catchuparchiver_command_start (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  configuration varchar(32),
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_logeventLFO;
CREATE TABLE catchuparchiver_logeventLFO (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_seqNum int,
  alias varchar(128),
  URL varchar(128),
  Generator varchar(128),
  Version varchar(32),
  Checksum char(32),
  Mime_Type varchar(64),
  Byte_Size long,
  PRIMARY KEY (date_time)
);

DROP TABLE IF EXISTS catchuparchiver_logevent_catchuparchiverEntityStartup;
CREATE TABLE catchuparchiver_logevent_catchuparchiverEntityStartup (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  Identifier double,
  Address int,
  priority int,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_logevent_catchuparchiverEntitySummaryState;
CREATE TABLE catchuparchiver_logevent_catchuparchiverEntitySummaryState (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  Identifier double,
  Address int,
  priority int,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_command_SetValue;
CREATE TABLE catchuparchiver_command_SetValue (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  json_parameters varchar(32),
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_command_exitControl;
CREATE TABLE catchuparchiver_command_exitControl (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  state tinyint,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_command_enable;
CREATE TABLE catchuparchiver_command_enable (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  state tinyint,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_logevent_SettingVersions;
CREATE TABLE catchuparchiver_logevent_SettingVersions (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  recommendedSettingVersion varchar(32),
  priority int,
  PRIMARY KEY (date_time)
);
DROP TABLE IF EXISTS catchuparchiver_logevent_catchuparchiverEntityShutdown;
CREATE TABLE catchuparchiver_logevent_catchuparchiverEntityShutdown (
  date_time DATETIME(6),
  private_revCode char(32),
  private_sndStamp double precision,
  private_rcvStamp double precision,
  private_seqNum int,
  private_origin int,
  private_host int,
  Identifier double,
  Address int,
  priority int,
  PRIMARY KEY (date_time)
);
